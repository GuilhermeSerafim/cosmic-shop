package br.com.alura.cosmicshop.model;

import br.com.alura.cosmicshop.calculations.ItemCompra;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class Client {
    //Variaveis, construtor, getters e setters
    private String nome;
    private String planeta;
    private String descricaoDaCompra;
    private double valorDaCompra;
    private double limiteDoCartao;
    private String plano;
    private String sair; //para sair do menu ou inserir dados iniciais
    private String sair2;
    private String raridade; //Criado para remover o bug do nextInt (o nextInt() n√£o consome a quebra de linha)
    private Scanner in = new Scanner(System.in); //Encapsulando Scanner
    private List<ItemCompra> itensDeCompra = new ArrayList<>(); //Aqui vai ser armazado o que for instanciado no adicionar item

    //N√£o vamos inserir diretamente no construtor, vamos inserir atr√°ves de metodos para o usuario inserir pelo Scanner
    public Client(String nome, String planeta, String descricaoDaCompra, double valorDaCompra, double limiteDoCartao) {

        this.nome = nome;
        this.planeta = planeta;
        this.descricaoDaCompra = descricaoDaCompra;
        this.valorDaCompra = valorDaCompra;
        this.limiteDoCartao = limiteDoCartao;
    }

    public Client() {

    }

    public String getNome() {
        return nome;
    }

    public void setNome(String nome) {
        this.nome = nome;
    }

    public String getPlaneta() {
        return planeta;
    }

    public void setPlaneta(String planeta) {
        this.planeta = planeta;
    }

    public String getDescricaoDaCompra() {
        return descricaoDaCompra;
    }

    public void setDescricaoDaCompra(String descricaoDaCompra) {
        this.descricaoDaCompra = descricaoDaCompra;
    }

    public double getValorDaCompra() {
        return valorDaCompra;
    }

    public void setValorDaCompra(double valorDaCompra) {
        this.valorDaCompra = valorDaCompra;
    }

    public double getLimiteDoCartao() {
        return limiteDoCartao;
    }

    public void setLimiteDoCartao(double limiteDoCartao) {
        this.limiteDoCartao = limiteDoCartao;
    }

    //Metodos mais genericos da classe mae
    public void inserirLimite(double limiteDoCartao) {
        this.limiteDoCartao += limiteDoCartao;
    }

    //Forma mais otimizada e objetiva
    public void inserirDadosIniciais() {
        System.out.println("Digite a sua entidade: ");
        this.nome = this.in.nextLine();
        System.out.println("Digite seu planeta: ");
        this.planeta = this.in.nextLine();
        System.out.println("""
                Junte-se a n√≥s e explore o cosmos infinito. 
                Quer participar? Digite 'QUERO!'
                Ou 'Sair' para voltar ao seu planeta...
                """);
        this.sair = this.in.nextLine();
        while (!this.sair.equals("Sair")) {
            System.out.println("""
                    Planos disponiveis: (Em breve teremos o plano Metaverso)
                    Astro studies üìö
                    Stellar transport üöÄ
                    Centro de Apoio Interspacial (CAI) üö∞
                        """);
            this.plano = this.in.nextLine().toUpperCase(); //O to upper case vai servir pra ignorar se √© minusculo ou maisculo quando o usuario digitar
            if (this.plano.equals("Astro studies".toUpperCase())) {
                this.limiteDoCartao = 50010.70;
                System.out.printf("""
                        Este grupo seria respons√°vel por realizar pesquisas e estudos aprofundados no campo da astronomia e da astrof√≠sica. 
                        Eles podem estar envolvidos em explorar novos planetas, investigar estrelas, identificar exoplanetas e estudar fen√¥menos c√≥smicos.
                        Voc√™ tem dispon√≠vel %.2f Stelares disponiveis para suas pesquisas!üî≠
                        """, this.limiteDoCartao);
                break;

            } else if (this.plano.equals("Stellar transport".toUpperCase())) {
                this.limiteDoCartao = 1000000;
                System.out.printf("""
                        Este grupo estaria encarregado de desenvolver tecnologias e infraestruturas para o transporte e explora√ß√£o de sistemas estelares.
                        Eles seriam a espinha dorsal da explora√ß√£o espacial.
                        Voc√™ tem dispon√≠vel %.2f Stelares para suas viajens, explore e viva experi√™ncias √∫nicas!üöÄ
                        %n""", this.limiteDoCartao);
                break;

            } else if (this.plano.equals(" Centro de Apoio Interspacial (CAI)".toUpperCase())) {
                this.limiteDoCartao = 300000.80;
                System.out.printf("""
                        A CAI √© uma instala√ß√£o dedicada a fornecer assist√™ncia, recursos e suporte para comunidades em ambientes interestelares
                        Voc√™ tem dispon√≠vel %.2f Stelares. Cultive a harmonia nesse vasto universo!üïäÔ∏è
                        """, this.limiteDoCartao);
                break;

            } else {
                System.out.println("Op√ß√£o inv√°lida. Tente novamente.");
            }
            //Se eu n√£o colocar essa linha ficar√° em um loop infinito, pois preciso que o usuario digite, para o while ler o valor novamente
            //Pois assim que o loop se encerra, ele n√£o volta na variavel da linha 87, ele executa o loop novamente, ent√£o tenho que perguntar novamente...
            this.plano = this.in.nextLine().toUpperCase();
        }

    }

    //Criando menu
    public void adicionarItem() {
        System.out.printf("""
                                
                                
                Ol√° %s!
                Digite 'continuar' caso queira adquirir algum item
                Ou 'sair' para encerrar agora o sistema
                """, nome);
        this.sair2 = this.in.nextLine();
        while (!this.sair2.equals("Sair")) {
            System.out.println("""
                                        
                    O que voc√™ procura?
                    """);
            this.descricaoDaCompra = this.in.nextLine();

            System.out.println("Digite o valor substimado: ");
            this.valorDaCompra = this.in.nextDouble();
            this.limiteDoCartao = this.limiteDoCartao - this.valorDaCompra;
            this.in.nextLine(); //Tratando enter pendente //Explica√ß√£o: se voc√™ chamar nextLine() imediatamente ap√≥s nextDouble(), o nextLine() ir√° consumir o Enter pendente, o que pode levar a comportamentos inesperados, como a leitura de uma linha vazia.

            System.out.println("Qual √© a raridade desse item no seu planeta? ");
            this.raridade = this.in.nextLine();

            ItemCompra item = new ItemCompra(descricaoDaCompra, valorDaCompra, raridade);
            itensDeCompra.add(item);

            System.out.printf("""
                    Aqui est√° seu item:
                    %s
                    %.2f
                    %s
                                        
                    Limite dispon√≠vel:
                    %.2f
                    """, descricaoDaCompra, valorDaCompra, raridade, limiteDoCartao);
            System.out.println("Digite qualquer coisa se quiser continuar, ou 'Sair' para finalizar as compras");
            this.sair2 = this.in.nextLine();
        }
    }

    public void mostrarItensDaCompra() {
        System.out.println("Todos os itens: ");
        for (ItemCompra item : itensDeCompra) {
            System.out.println("**************");
            System.out.printf("""
                    Descri√ß√£o: %s
                    Valor: %.2f
                    Raridade: %s
                    """, item.getDescricao(), item.getValor(), item.getRaridade());
            System.out.println("**************");
        }
    }
}
